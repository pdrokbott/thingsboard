version: '3.8'

services:

  postgres:
    image: postgres:16-alpine
    restart: always
    environment:
      - POSTGRES_DB=thingsboard
      - POSTGRES_USER=tb_admin
      - POSTGRES_PASSWORD=tb_admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - coolify
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tb_admin -d thingsboard"]
      interval: 10s
      timeout: 5s
      retries: 10

  thingsboard:
    image: thingsboard/tb-postgres:3.9.1
    restart: always
    environment:
      - TB_BASE_URL=https://tb.smart-byte.dev
      - TB_QUEUE_TYPE=kafka
      - TB_KAFKA_SERVERS=kafka:9092
      - TB_CACHE_REDIS_HOST=redis
      - TB_CACHE_REDIS_PORT=6379
      - LOAD_DEMO=false
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/thingsboard
      - SPRING_DATASOURCE_USERNAME=tb_admin
      - SPRING_DATASOURCE_PASSWORD=tb_admin
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT=30000
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=20
      - SPRING_DATASOURCE_HIKARI_REGISTER_MBEANS=false
      - HTTP_BIND_PORT=9090
      - MQTT_ENABLED=true
      - MQTT_BIND_PORT=1883
      - COAP_ENABLED=true
      - COAP_BIND_PORT=5683
      - LWM2M_ENABLED=true
      - LWM2M_BIND_PORT=5685
      - SNMP_ENABLED=true
      - SNMP_BIND_PORT=162
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - coolify
    cap_add:
      - NET_ADMIN
    volumes:
      - mytb_data:/data
      - mytb_logs:/var/log/thingsboard
      - ./thingsboard.yml:/config/thingsboard.yml  # <-- Bind do seu arquivo customizado!
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=coolify"
      - "traefik.http.routers.tb-http.rule=Host(`tb.smart-byte.dev`)"
      - "traefik.http.routers.tb-http.entrypoints=https"
      - "traefik.http.routers.tb-http.tls=true"
      - "traefik.http.routers.tb-http.tls.certresolver=letsencrypt"
      - "traefik.http.routers.tb-http.service=tb-http-service"
      - "traefik.http.services.tb-http-service.loadbalancer.server.port=9090"
      - "traefik.http.routers.tb-ws.rule=Host(`tb.smart-byte.dev`) && PathPrefix(`/api/ws`)"
      - "traefik.http.routers.tb-ws.entrypoints=https"
      - "traefik.http.routers.tb-ws.service=tb-ws-service"
      - "traefik.http.services.tb-ws-service.loadbalancer.server.port=8080"
      - "traefik.http.routers.tb-ws.middlewares=tb-ws-headers"
      - "traefik.http.middlewares.tb-ws-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.8
    restart: always
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      - coolify
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.7.0
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_MESSAGE_MAX_BYTES=10485760
      - KAFKA_CFG_MAX_REQUEST_SIZE=10485760
      - KAFKA_HEAP_OPTS=-Xmx1g -Xms1g
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - coolify

  redis:
    image: redis:alpine
    restart: always
    command: redis-server --requirepass tb_admin
    volumes:
      - redis_data:/data
    networks:
      - coolify
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  tb-js-executor:
    image: thingsboard/tb-js-executor:latest
    restart: always
    environment:
      - REMOTE_JS_EVAL_REQUEST_TOPIC=js.eval.requests
      - REMOTE_JS_EVAL_RESPONSE_TOPIC=js.eval.responses
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - LOGGER_LEVEL=info
      - LOG_FOLDER=logs
      - MAX_CPU_TIME=2000
      - MAX_ERRORS=3
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - coolify

volumes:
  postgres_data:
  zookeeper_data:
  kafka_data:
  redis_data:
  mytb_data:
    driver: local
  mytb_logs:
    driver: local

networks:
  coolify:
    external: true
